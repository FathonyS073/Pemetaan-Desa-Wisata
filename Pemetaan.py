# -*- coding: utf-8 -*-
"""Skripsi fix

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gs2yjxt5X_N9_A4j9La45tmr1mUIFVnn
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install minisom

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from minisom import MiniSom
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

df = pd.read_excel('/content/drive/MyDrive/Bismillah Skripsi /Dataset.xlsx')
df

"""# Normalisasi"""

import pandas as pd

# Load dataset
file_path = "/content/drive/MyDrive/Bismillah Skripsi /Dataset.xlsx"  # Ganti dengan path file Anda
df = pd.read_excel(file_path)

# 1. Ubah kolom "Jenis prasarana trasportasi" menjadi numerik (1 jika "Darat", 0 untuk lainnya)
df['Jenis prasarana trasportasi'] = df['Jenis prasarana trasportasi'].replace({
    'Darat': 1, 'Air' : '2', 'Darat dan Air' : 3,'Lainnya': 4
    })

# 2. Ubah kolom "Jenis permukaan jalan darat"
df['Jenis permukaan  jalan darat'] = df['Jenis permukaan  jalan darat'].replace({
    'Aspal/Beton': 1,
    'Diperkeras (kerikil. batu. dll)': 2,
    'Kerikil. Batu. dll	': 3,
    'lainnya': 4
})

# 3. Ubah kolom "Media Online" menjadi numerik (1 untuk "Ada", 0 untuk "Tidak Ada")
df['Media Online'] = df['Media Online'].replace({'Ada': 1, 'Tidak Ada': 0})

# 4. Ubah kolom "Desa/Kelurahan" menjadi numerik
df['Desa/Kelurahan'] = df['Desa/Kelurahan'].astype('category').cat.codes

# 5. Ubah kolom "Kecamatan" menjadi numerik
df['Kecamatan'] = df['Kecamatan'].astype('category').cat.codes


# 7. Pastikan kolom angka lainnya sesuai tipe data yang diinginkan
df['Jarak ke ibu kota kecamatan '] = df['Jarak ke ibu kota kecamatan '].astype(int)
df['Jarak ke ibu kota kabupaten '] = df['Jarak ke ibu kota kabupaten '].astype(int)

# Menampilkan hasil DataFrame
df

# Simpan hasil ke file baru
df.to_excel("dataset_potensi_desa_wisata_ubah.xlsx", index=False)

import pandas as pd

# Contoh: Membaca df
# df = pd.read_csv("path_to_dataset.csv")

# Daftar kolom dengan tipe data object
object_columns = df.select_dtypes(include=['object']).columns

# Ubah kolom 'object' menjadi 'int' (jika memungkinkan)
for column in object_columns:
    try:
        df[column] = pd.to_numeric(df[column], errors='coerce').fillna(0).astype(int)
        print(f"Kolom '{column}' berhasil diubah ke integer.")
    except Exception as e:
        print(f"Gagal mengubah kolom '{column}' ke integer: {e}")

# Memastikan perubahan
df.dtypes

print(df.isnull().sum())

# normalisasi data min max
scaler = MinMaxScaler()
df_normalized = scaler.fit_transform(df.iloc[:, 3:])
df_normalized

file_path = '/content/drive/MyDrive/Bismillah Skripsi /hasil.prepro1'  # Ganti 'My Drive' sesuai lokasi di Google Drive
df.to_csv(file_path, index=False)
print(f"File berhasil disimpan di {file_path}")

"""#SOM"""

import numpy as np

# 1. Tentukan dimensi grid SOM
grid_rows, grid_cols = 3, 3  # Dimensi SOM (3x3 grid)

# 2. Tentukan jumlah fitur (dimensi input)
num_features = df_normalized.shape[1]

# 3. Inisialisasi bobot random (nilai antara 0 dan 1)
weights = np.random.rand(grid_rows, grid_cols, num_features)

# 4. Perhitungan jarak Euclidean untuk setiap data ke setiap bobot
distances = np.zeros((df_normalized.shape[0], grid_rows, grid_cols))

for i, data_point in enumerate(df_normalized):
    for row in range(grid_rows):
        for col in range(grid_cols):
            # Hitung jarak Euclidean
            distances[i, row, col] = np.sqrt(np.sum((data_point - weights[row, col]) ** 2))

# 5. Temukan jarak terkecil dan indeksnya
closest_units = []

for i, distance_matrix in enumerate(distances):
    min_distance = np.min(distance_matrix)  # Nilai jarak terkecil
    min_index = np.unravel_index(np.argmin(distance_matrix), distance_matrix.shape)  # Indeks dari jarak terkecil
    closest_units.append((i, min_distance, min_index))

# Output bobot awal, jarak, dan unit terdekat
print("Bobot awal (random):")
print(weights)

print("\nJarak Euclidean untuk setiap data ke bobot:")
print(distances)

print("\nData dengan unit SOM terdekat:")
for idx, min_dist, unit in closest_units:
    print(f"Data {idx + 1}: Jarak Terkecil = {min_dist}, Unit Terdekat = {unit}")

# Update bobot berdasarkan data dengan unit terdekat
learning_rate = 0.5  # Learning rate awal
max_iterations = 100
mse_threshold = 0.01  # Ambang batas MSE
mse = float('inf')  # Mean Squared Error awal

iteration = 0
while mse > mse_threshold and iteration < max_iterations:
    mse = 0  # Reset MSE untuk iterasi ini
    for i, data_point in enumerate(df_normalized):
        # Temukan unit SOM terdekat
        distance_matrix = distances[i]
        closest_unit = np.unravel_index(np.argmin(distance_matrix), distance_matrix.shape)

        # Update bobot untuk unit terdekat
        row, col = closest_unit
        weights[row, col] += learning_rate * (data_point - weights[row, col])

        # Hitung kontribusi error untuk MSE
        mse += np.sum((data_point - weights[row, col]) ** 2)

    # Normalisasi MSE untuk semua data
    mse /= df_normalized.shape[0]

    # Kurangi learning rate setiap iterasi (opsional)
    learning_rate *= 0.95  # Decay rate

    iteration += 1
    print(f"Iterasi {iteration}, MSE: {mse}")

# Output hasil akhir
print("\nBobot akhir setelah training:")
print(weights)

from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Data setelah normalisasi (hasil dari data_normalized)
data = df_normalized

# 1. Tentukan rentang jumlah cluster yang akan diuji
max_clusters = 10
inertia_values = []

# 2. Hitung inertia untuk setiap jumlah cluster
for k in range(1, max_clusters + 1):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(data)
    inertia_values.append(kmeans.inertia_)
    if k == 3 :
      kmeans_labels = kmeans.fit_predict(data)
      kmeans_labels

# 3. Plot Elbow Method
plt.figure(figsize=(8, 5))
plt.plot(range(1, max_clusters + 1), inertia_values, marker='o', linestyle='-', color='b')
plt.xlabel('Jumlah Cluster (k)')
plt.ylabel('Inertia')
plt.title('Elbow Method untuk Menentukan Jumlah Cluster Optimal')
plt.xticks(range(1, max_clusters + 1))
plt.grid()
plt.show()

kmeans_labels

# Fungsi klasifikasi untuk kriteria tambahan
def klasifikasi_luas_area(value):
    if value > 5:
        return 3  # Sangat luas
    elif 4 <= value <= 5:
        return 2  # Luas
    elif 2 <= value < 4:
        return 1  # Cukup sempit
    else:
        return 0  # Sempit

# Fungsi klasifikasi jarak tanpa parameter kategori
def klasifikasi_jarak(value):
    if value > 5:
        return 0  # Jauh
    elif 4 < value <= 5:
        return 1  # Cukup jauh
    elif 2 < value <= 4:
        return 2  # Dekat
    else:
        return 3  # Sangat dekat

def klasifikasi_akomodasi(value):
    if value > 5:
        return 3  # Sangat banyak
    elif 4 <= value <= 5:
        return 2  # banyak
    elif 2 <= value < 4:
        return 1  # Cukup sedikit
    else:
        return 0  # sedikit

def klasifikasi_tempat_makan(value):
    if value > 5:
        return 3  # 5 bintang
    elif 4 <= value <= 5:
        return 2  # 4 bintang
    elif 2 <= value < 4:
        return 1  # 3 bintang
    else:
        return 0  # 1 bintang

def klasifikasi_prasarana(value):
    if value > 5:
        return 3  # Sangat memadai
    elif 4 <= value <= 5:
        return 2  # Memadai
    elif 2 <= value < 4:
        return 1  # Cukup terbatas
    else:
        return 0  # Terbatas

def klasifikasi_permukaan_jalan(value):
    if value == 1:
        return 3  # Sangat bagus
    elif value == 2:
        return 2  # Cukup bagus
    elif value == 3:
        return 1  # Cukup rusak
    elif value == 4:
        return 0  # Rusak
    else:
        return None  # Jika ada nilai yang tidak valid

def klasifikasi_jumlah_tower_telepon(value):
    if value > 5:
        return 3  # Sangat banyak
    elif 4 <= value <= 5:
        return 2  # Banyak
    elif 2 <= value < 4:
        return 1  # Cukup sedikit
    else:
        return 0  # Sedikit

def klasifikasi_media_online(value):
    if value > 5:
        return 3  # Sangat banyak
    elif 4 <= value <= 5:
        return 2  # Banyak
    elif 2 <= value < 4:
        return 1  # Cukup sedikit
    else:
        return 0  # Sedikit

def klasifikasi_pantai(value):
    if value > 5:
        return 3  # Sangat banyak
    elif 4 <= value <= 5:
        return 2  # Banyak
    elif 2 <= value < 4:
        return 1  # Cukup sedikit
    else:
        return 0  # Sedikit

def klasifikasi_fasilitas(value):
    if value > 5:
        return 3  # Sangat baik
    elif 4 <= value <= 5:
        return 2  # Baik
    elif 2 <= value < 4:
        return 1  # Cukup baik
    else:
        return 0  # Kurang

def klasifikasi_harga_tiket(value):
    if value < 5000:
        return 3  # Sangat murah
    elif 5000 <= value <= 10000:
        return 2  # Murah
    elif 10001 <= value <= 15000:
        return 1  # Cukup mahal
    else:
        return 0  # Sangat mahal

def klasifikasi_rating(value):
    if value > 5:
        return 3  # 5 bintang
    elif 4 <= value <= 5:
        return 2  # 4 bintang
    elif 2 <= value < 4:
        return 1  # 3 bintang
    else:
        return 0  # 1 bintang

def klasifikasi_wisman(value):
    if value > 5:
        return 3  # > 5 orang
    elif 4 <= value <= 5:
        return 2  # 4 - 5 orang
    elif 2 <= value < 4:
        return 1  # 2 - 3 orang
    else:
        return 0  # 0 - 1 orang

def klasifikasi_wisnus(value):
    if value > 5:
        return 3  # > 5 orang
    elif 4 <= value <= 5:
        return 2  # 4 - 5 orang
    elif 2 <= value < 4:
        return 1  # 2 - 3 orang
    else:
        return 0  # 0 - 1 orang

# Terapkan fungsi klasifikasi pada dataset sesuai dengan kolom Anda

# Kolom dataset Anda
df['Luas Area Skala'] = df['Luas total area'].apply(klasifikasi_luas_area)
df['jarak_kecamatan'] = df['Jarak ke ibu kota kecamatan '].apply(klasifikasi_jarak)
df['jarak_kabupaten'] = df['Jarak ke ibu kota kabupaten '].apply(klasifikasi_jarak)
df['Akomodasi Skala'] = df['Akomodasi. hotel. homestay'].apply(klasifikasi_akomodasi)
df['Tempat Makan Skala'] = df['Restourant/Tempat makan'].apply(klasifikasi_tempat_makan)
df['Prasarana Skala'] = df['Jenis prasarana trasportasi'].apply(klasifikasi_prasarana)
df['Permukaan Jalan Skala'] = df['Jenis permukaan  jalan darat'].apply(klasifikasi_permukaan_jalan)
df['Jumlah Tower Telepon Skala'] = df['Jumlah Menara Telepon Seluler'].apply(klasifikasi_jumlah_tower_telepon)
df['Media Online Skala'] = df['Media Online'].apply(klasifikasi_media_online)
df['Pantai Skala'] = df['Pantai/Danau'].apply(klasifikasi_pantai)
df['Fasilitas Skala'] = df['Failitas'].apply(klasifikasi_fasilitas)
df['Harga Tiket Skala'] = df['Harga Tiket'].apply(klasifikasi_harga_tiket)
df['Rating Skala'] = df['Rating'].apply(klasifikasi_rating)
df['Wisman Skala'] = df['Wisman'].apply(klasifikasi_wisman)
df['Wisnus Skala'] = df['Wisnus'].apply(klasifikasi_wisnus)

# Menampilkan DataFrame yang sudah ditambahkan kolom skala
print(df.head())

# Simpan ke file baru jika diperlukan
df.to_excel("dataset_klasifikasi_skala_lengkap1.xlsx", index=False)

import pandas as pd

# Load dataset yang ditampilkan
df = pd.read_csv('/content/drive/MyDrive/Bismillah Skripsi /Hasil Prepro1.csv')

# Load dataset asli
df_asli = pd.read_csv('/content/drive/MyDrive/Bismillah Skripsi /Dataset.csv')  # Pastikan file ini memiliki kolom "No", "Desa/Kelurahan", "Kecamatan"

# Hapus kolom lama
df = df.drop(columns=['Desa/Kelurahan', 'Kecamatan'])

# Gabungkan berdasarkan kolom 'No'
df = pd.merge(df, df_asli[['No', 'Desa/Kelurahan', 'Kecamatan']], on='No', how='left')

# Pindahkan kolom 'Desa/Kelurahan' ke posisi awal (indeks ke-1)
df.insert(1, 'Desa/Kelurahan', df.pop('Desa/Kelurahan'))

# Pindahkan kolom 'Kecamatan' ke posisi awal (indeks ke-2)
df.insert(2, 'Kecamatan', df.pop('Kecamatan'))

# Simpan dataset baru
df.to_csv('dataset_terbaru.csv', index=False)
print(df.head())

file_path = '/content/drive/MyDrive/Bismillah Skripsi /data visualisasi.csv'  # Ganti 'My Drive' sesuai lokasi di Google Drive
df.to_csv(file_path, index=False)
print(f"File berhasil disimpan di {file_path}")

file_path = "/content/drive/MyDrive/Bismillah Skripsi /data visualisasi.csv"  # Sesuaikan dengan lokasi file Anda
df = pd.read_csv(file_path)

"""## SKALA KRITERIA LUAS"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Terapkan klasifikasi
df['luas total']= df['Luas total area'].apply(klasifikasi_luas_area)

# Tambahkan nomor urut
df_sorted = df.sort_values(by='luas total', ascending=False).reset_index(drop=True)
df_sorted.index += 1  # Nomor dimulai dari 1
df_sorted['No'] = df_sorted.index

# Menampilkan tabel dengan pewarnaan
fig, ax = plt.subplots(figsize=(12, 7))
ax.axis('tight')
ax.axis('off')

# Buat colormap untuk pewarnaan
cmap = LinearSegmentedColormap.from_list("custom", ["red", "yellow", "green"], N=4)
colors = df_sorted['luas total'].map(lambda x: cmap(x / 3))

# Tambahkan data tabel ke matplotlib
table_data = df_sorted[['No', 'Desa/Kelurahan', 'Kecamatan', 'Luas total area', 'luas total']].values
col_labels = ['No', 'Desa/Kelurahan', 'Kecamatan', 'Luas Area', 'Skala']

# Tabel dengan warna pada kolom Skala
table = plt.table(
    cellText=table_data,
    colLabels=col_labels,
    loc='center',
    cellColours=[
        ['white', 'white', 'white', 'white', color] for color in colors
    ]
)

# Atur ukuran font dan lebar kolom
table.auto_set_font_size(False)
table.set_fontsize(10)
table.auto_set_column_width(col=list(range(len(col_labels))))

plt.title('Tabel Skala Prioritas Akomodasi per Kecamatan', fontsize=14)
plt.show()

"""## kLASIFIKASI JARAK IBU KOTA KECAMATAN"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap



# Terapkan klasifikasi
df['jarak_kecamatan'] = df['Jarak ke ibu kota kecamatan '].apply(klasifikasi_jarak)

# Tambahkan nomor urut
df_sorted = df.sort_values(by='jarak_kecamatan', ascending=False).reset_index(drop=True)
df_sorted.index += 1  # Nomor dimulai dari 1
df_sorted['No'] = df_sorted.index

# Menampilkan tabel dengan pewarnaan
fig, ax = plt.subplots(figsize=(12, 7))
ax.axis('tight')
ax.axis('off')

# Buat colormap untuk pewarnaan
cmap = LinearSegmentedColormap.from_list("custom", ["red", "yellow", "green"], N=4)
colors = [cmap(x / 3) for x in df_sorted['jarak_kecamatan']]

# Tambahkan data tabel ke matplotlib
table_data = df_sorted[['No', 'Desa/Kelurahan', 'Kecamatan', 'Jarak ke ibu kota kecamatan ', 'jarak_kecamatan']].values
col_labels = ['No', 'Desa/Kelurahan', 'Kecamatan', 'Jarak ke ibu kota kecamatan', 'Skala']

# Tabel dengan warna pada kolom Skala
cell_colors = [['white'] * (len(col_labels) - 1) + [colors[i]] for i in range(len(colors))]

table = plt.table(
    cellText=table_data,
    colLabels=col_labels,
    loc='center',
    cellColours=cell_colors
)

# Atur ukuran font dan lebar kolom
table.auto_set_font_size(False)
table.set_fontsize(10)
table.auto_set_column_width(col=list(range(len(col_labels))))

plt.title('Tabel Skala Prioritas Akomodasi per Kecamatan', fontsize=14)
plt.show()

"""## Klasifikasi jarak ke kabupaten"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Terapkan klasifikasi
df['jarak_kab'] = df['Jarak ke ibu kota kabupaten '].apply(klasifikasi_jarak)

# Tambahkan nomor urut
df_sorted = df.sort_values(by='jarak_kab', ascending=False).reset_index(drop=True)
df_sorted.index += 1  # Nomor dimulai dari 1
df_sorted['No'] = df_sorted.index

# Menampilkan tabel dengan pewarnaan
fig, ax = plt.subplots(figsize=(12, 7))
ax.axis('tight')
ax.axis('off')

# Buat colormap untuk pewarnaan
cmap = LinearSegmentedColormap.from_list("custom", ["red", "yellow", "green"], N=4)
colors = df_sorted['jarak_kab'].map(lambda x: cmap(x / 3))

# Tambahkan data tabel ke matplotlib
table_data = df_sorted[['No', 'Desa/Kelurahan', 'Kecamatan', 'Jarak ke ibu kota kabupaten ', 'jarak_kab']].values
col_labels = ['No', 'Desa/Kelurahan', 'Kecamatan', 'jarak_kab', 'Skala']

# Tabel dengan warna pada kolom Skala
table = plt.table(
    cellText=table_data,
    colLabels=col_labels,
    loc='center',
    cellColours=[
        ['white', 'white', 'white', 'white', color] for color in colors
    ]
)

# Atur ukuran font dan lebar kolom
table.auto_set_font_size(False)
table.set_fontsize(10)
table.auto_set_column_width(col=list(range(len(col_labels))))

plt.title('Tabel Skala Prioritas Akomodasi per Kecamatan', fontsize=14)
plt.show()

"""## KlasifikasiAkomodasi"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Terapkan klasifikasi
df['Akomodasi Skala'] = df['Akomodasi. hotel. homestay'].apply(klasifikasi_akomodasi)

# Tambahkan nomor urut
df_sorted = df.sort_values(by='Akomodasi Skala', ascending=False).reset_index(drop=True)
df_sorted.index += 1  # Nomor dimulai dari 1
df_sorted['No'] = df_sorted.index

# Menampilkan tabel dengan pewarnaan
fig, ax = plt.subplots(figsize=(12, 7))
ax.axis('tight')
ax.axis('off')

# Buat colormap untuk pewarnaan
cmap = LinearSegmentedColormap.from_list("custom", ["red", "yellow", "green"], N=4)
colors = df_sorted['Akomodasi Skala'].map(lambda x: cmap(x / 3))

# Tambahkan data tabel ke matplotlib
table_data = df_sorted[['No', 'Desa/Kelurahan', 'Kecamatan', 'Akomodasi. hotel. homestay', 'Akomodasi Skala']].values
col_labels = ['No', 'Desa/Kelurahan', 'Kecamatan', 'Akomodasi (Jumlah)', 'Skala']

# Tabel dengan warna pada kolom Skala
table = plt.table(
    cellText=table_data,
    colLabels=col_labels,
    loc='center',
    cellColours=[
        ['white', 'white', 'white', 'white', color] for color in colors
    ]
)

# Atur ukuran font dan lebar kolom
table.auto_set_font_size(False)
table.set_fontsize(10)
table.auto_set_column_width(col=list(range(len(col_labels))))

plt.title('Tabel Skala Prioritas Akomodasi per Kecamatan', fontsize=14)
plt.show()

"""## Tempat Makan"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Terapkan klasifikasi
df['tempatmakan'] = df['Restourant/Tempat makan'].apply(klasifikasi_tempat_makan)

# Tambahkan nomor urut
df_sorted = df.sort_values(by='tempatmakan', ascending=False).reset_index(drop=True)
df_sorted.index += 1  # Nomor dimulai dari 1
df_sorted['No'] = df_sorted.index

# Menampilkan tabel dengan pewarnaan
fig, ax = plt.subplots(figsize=(12, 7))
ax.axis('tight')
ax.axis('off')

# Buat colormap untuk pewarnaan
cmap = LinearSegmentedColormap.from_list("custom", ["red", "yellow", "green"], N=4)
colors = df_sorted['tempatmakan'].map(lambda x: cmap(x / 3))

# Tambahkan data tabel ke matplotlib
table_data = df_sorted[['No', 'Desa/Kelurahan', 'Kecamatan', 'Restourant/Tempat makan', 'tempatmakan']].values
col_labels = ['No', 'Desa/Kelurahan', 'Kecamatan', 'tempatmakan', 'Skala']

# Tabel dengan warna pada kolom Skala
table = plt.table(
    cellText=table_data,
    colLabels=col_labels,
    loc='center',
    cellColours=[
        ['white', 'white', 'white', 'white', color] for color in colors
    ]
)

# Atur ukuran font dan lebar kolom
table.auto_set_font_size(False)
table.set_fontsize(10)
table.auto_set_column_width(col=list(range(len(col_labels))))

plt.title('Tabel Skala Prioritas Akomodasi per Kecamatan', fontsize=14)
plt.show()

"""## Prasarana"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Terapkan klasifikasi
df['prasarana'] = df['Jenis prasarana trasportasi'].apply(klasifikasi_prasarana)

# Tambahkan nomor urut
df_sorted = df.sort_values(by='prasarana', ascending=False).reset_index(drop=True)
df_sorted.index += 1  # Nomor dimulai dari 1
df_sorted['No'] = df_sorted.index

# Menampilkan tabel dengan pewarnaan
fig, ax = plt.subplots(figsize=(12, 7))
ax.axis('tight')
ax.axis('off')

# Buat colormap untuk pewarnaan
cmap = LinearSegmentedColormap.from_list("custom", ["red", "yellow", "green"], N=4)
colors = df_sorted['prasarana'].map(lambda x: cmap(x / 3))

# Tambahkan data tabel ke matplotlib
table_data = df_sorted[['No', 'Desa/Kelurahan', 'Kecamatan', 'Jenis prasarana trasportasi', 'prasarana']].values
col_labels = ['No', 'Desa/Kelurahan', 'Kecamatan', 'prasarana', 'Skala']

# Tabel dengan warna pada kolom Skala
table = plt.table(
    cellText=table_data,
    colLabels=col_labels,
    loc='center',
    cellColours=[
        ['white', 'white', 'white', 'white', color] for color in colors
    ]
)

# Atur ukuran font dan lebar kolom
table.auto_set_font_size(False)
table.set_fontsize(10)
table.auto_set_column_width(col=list(range(len(col_labels))))

plt.title('Tabel Skala Prioritas Akomodasi per Kecamatan', fontsize=14)
plt.show()

"""## Permukaan jalan"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Terapkan klasifikasi
df['kondisi_jalan'] = df['Jenis permukaan  jalan darat'].apply(klasifikasi_permukaan_jalan)

# Tambahkan nomor urut
df_sorted = df.sort_values(by='kondisi_jalan', ascending=False).reset_index(drop=True)
df_sorted.index += 1  # Nomor dimulai dari 1
df_sorted['No'] = df_sorted.index

# Menampilkan tabel dengan pewarnaan
fig, ax = plt.subplots(figsize=(12, 7))
ax.axis('tight')
ax.axis('off')

# Buat colormap untuk pewarnaan
cmap = LinearSegmentedColormap.from_list("custom", ["red", "yellow", "green"], N=4)
colors = df_sorted['kondisi_jalan'].map(lambda x: cmap(x / 3))

# Tambahkan data tabel ke matplotlib
table_data = df_sorted[['No', 'Desa/Kelurahan', 'Kecamatan', 'Jenis permukaan  jalan darat', 'kondisi_jalan']].values
col_labels = ['No', 'Desa/Kelurahan', 'Kecamatan', 'kondisi_jalan', 'Skala']

# Tabel dengan warna pada kolom Skala
table = plt.table(
    cellText=table_data,
    colLabels=col_labels,
    loc='center',
    cellColours=[
        ['white', 'white', 'white', 'white', color] for color in colors
    ]
)

# Atur ukuran font dan lebar kolom
table.auto_set_font_size(False)
table.set_fontsize(10)
table.auto_set_column_width(col=list(range(len(col_labels))))

plt.title('Tabel Skala Prioritas Akomodasi per Kecamatan', fontsize=14)
plt.show()

"""## Tower"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Terapkan klasifikasi
df['tower'] = df['Jumlah Menara Telepon Seluler'].apply(klasifikasi_jumlah_tower_telepon)

# Tambahkan nomor urut
df_sorted = df.sort_values(by='tower', ascending=False).reset_index(drop=True)
df_sorted.index += 1  # Nomor dimulai dari 1
df_sorted['No'] = df_sorted.index

# Menampilkan tabel dengan pewarnaan
fig, ax = plt.subplots(figsize=(12, 7))
ax.axis('tight')
ax.axis('off')

# Buat colormap untuk pewarnaan
cmap = LinearSegmentedColormap.from_list("custom", ["red", "yellow", "green"], N=4)
colors = df_sorted['tower'].map(lambda x: cmap(x / 3))

# Tambahkan data tabel ke matplotlib
table_data = df_sorted[['No', 'Desa/Kelurahan', 'Kecamatan', 'Jumlah Menara Telepon Seluler', 'tower']].values
col_labels = ['No', 'Desa/Kelurahan', 'Kecamatan', 'tower', 'Skala']

# Tabel dengan warna pada kolom Skala
table = plt.table(
    cellText=table_data,
    colLabels=col_labels,
    loc='center',
    cellColours=[
        ['white', 'white', 'white', 'white', color] for color in colors
    ]
)

# Atur ukuran font dan lebar kolom
table.auto_set_font_size(False)
table.set_fontsize(10)
table.auto_set_column_width(col=list(range(len(col_labels))))

plt.title('Tabel Skala Prioritas Akomodasi per Kecamatan', fontsize=14)
plt.show()

"""## Media online"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Terapkan klasifikasi
df['medsos'] = df['Media Online'].apply(klasifikasi_media_online)

# Tambahkan nomor urut
df_sorted = df.sort_values(by='medsos', ascending=False).reset_index(drop=True)
df_sorted.index += 1  # Nomor dimulai dari 1
df_sorted['No'] = df_sorted.index

# Menampilkan tabel dengan pewarnaan
fig, ax = plt.subplots(figsize=(12, 7))
ax.axis('tight')
ax.axis('off')

# Buat colormap untuk pewarnaan
cmap = LinearSegmentedColormap.from_list("custom", ["red", "yellow", "green"], N=4)
colors = df_sorted['medsos'].map(lambda x: cmap(x / 3))

# Tambahkan data tabel ke matplotlib
table_data = df_sorted[['No', 'Desa/Kelurahan', 'Kecamatan', 'Media Online', 'medsos']].values
col_labels = ['No', 'Desa/Kelurahan', 'Kecamatan', 'medsos', 'Skala']

# Tabel dengan warna pada kolom Skala
table = plt.table(
    cellText=table_data,
    colLabels=col_labels,
    loc='center',
    cellColours=[
        ['white', 'white', 'white', 'white', color] for color in colors
    ]
)

# Atur ukuran font dan lebar kolom
table.auto_set_font_size(False)
table.set_fontsize(10)
table.auto_set_column_width(col=list(range(len(col_labels))))

plt.title('Tabel Skala Prioritas Akomodasi per Kecamatan', fontsize=14)
plt.show()

"""## Pantai / danau"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Terapkan klasifikasi
df['pantai'] = df['Pantai/Danau'].apply(klasifikasi_pantai)

# Tambahkan nomor urut
df_sorted = df.sort_values(by='pantai', ascending=False).reset_index(drop=True)
df_sorted.index += 1  # Nomor dimulai dari 1
df_sorted['No'] = df_sorted.index

# Menampilkan tabel dengan pewarnaan
fig, ax = plt.subplots(figsize=(12, 7))
ax.axis('tight')
ax.axis('off')

# Buat colormap untuk pewarnaan
cmap = LinearSegmentedColormap.from_list("custom", ["red", "yellow", "green"], N=4)
colors = df_sorted['pantai'].map(lambda x: cmap(x / 3))

# Tambahkan data tabel ke matplotlib
table_data = df_sorted[['No', 'Desa/Kelurahan', 'Kecamatan', 'Pantai/Danau', 'pantai']].values
col_labels = ['No', 'Desa/Kelurahan', 'Kecamatan', 'pantai', 'Skala']

# Tabel dengan warna pada kolom Skala
table = plt.table(
    cellText=table_data,
    colLabels=col_labels,
    loc='center',
    cellColours=[
        ['white', 'white', 'white', 'white', color] for color in colors
    ]
)

# Atur ukuran font dan lebar kolom
table.auto_set_font_size(False)
table.set_fontsize(10)
table.auto_set_column_width(col=list(range(len(col_labels))))

plt.title('Tabel Skala Prioritas Akomodasi per Kecamatan', fontsize=14)
plt.show()

"""## Fasilitas"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Terapkan klasifikasi
df['fasilitas'] = df['Failitas'].apply(klasifikasi_fasilitas)

# Tambahkan nomor urut
df_sorted = df.sort_values(by='fasilitas', ascending=False).reset_index(drop=True)
df_sorted.index += 1  # Nomor dimulai dari 1
df_sorted['No'] = df_sorted.index

# Menampilkan tabel dengan pewarnaan
fig, ax = plt.subplots(figsize=(12, 7))
ax.axis('tight')
ax.axis('off')

# Buat colormap untuk pewarnaan
cmap = LinearSegmentedColormap.from_list("custom", ["red", "yellow", "green"], N=4)
colors = df_sorted['fasilitas'].map(lambda x: cmap(x / 3))

# Tambahkan data tabel ke matplotlib
table_data = df_sorted[['No', 'Desa/Kelurahan', 'Kecamatan', 'Failitas', 'fasilitas']].values
col_labels = ['No', 'Desa/Kelurahan', 'Kecamatan', 'fasilitas', 'Skala']

# Tabel dengan warna pada kolom Skala
table = plt.table(
    cellText=table_data,
    colLabels=col_labels,
    loc='center',
    cellColours=[
        ['white', 'white', 'white', 'white', color] for color in colors
    ]
)

# Atur ukuran font dan lebar kolom
table.auto_set_font_size(False)
table.set_fontsize(10)
table.auto_set_column_width(col=list(range(len(col_labels))))

plt.title('Tabel Skala Prioritas Akomodasi per Kecamatan', fontsize=14)
plt.show()

"""## Tiket"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Terapkan klasifikasi
df['nilai'] = df['Rating'].apply(klasifikasi_harga_tiket)

# Tambahkan nomor urut
df_sorted = df.sort_values(by='nilai', ascending=False).reset_index(drop=True)
df_sorted.index += 1  # Nomor dimulai dari 1
df_sorted['No'] = df_sorted.index

# Menampilkan tabel dengan pewarnaan
fig, ax = plt.subplots(figsize=(12, 7))
ax.axis('tight')
ax.axis('off')

# Buat colormap untuk pewarnaan
cmap = LinearSegmentedColormap.from_list("custom", ["red", "yellow", "green"], N=4)
colors = df_sorted['nilai'].map(lambda x: cmap(x / 3))

# Tambahkan data tabel ke matplotlib
table_data = df_sorted[['No', 'Desa/Kelurahan', 'Kecamatan', 'Rating', 'nilai']].values
col_labels = ['No', 'Desa/Kelurahan', 'Kecamatan', 'nilai', 'Skala']

# Tabel dengan warna pada kolom Skala
table = plt.table(
    cellText=table_data,
    colLabels=col_labels,
    loc='center',
    cellColours=[
        ['white', 'white', 'white', 'white', color] for color in colors
    ]
)

# Atur ukuran font dan lebar kolom
table.auto_set_font_size(False)
table.set_fontsize(10)
table.auto_set_column_width(col=list(range(len(col_labels))))

plt.title('Tabel Skala Prioritas Akomodasi per Kecamatan', fontsize=14)
plt.show()

"""## Wisman"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Terapkan klasifikasi
df['wisatawanmanca'] = df['Wisman'].apply(klasifikasi_wisman)

# Tambahkan nomor urut
df_sorted = df.sort_values(by='wisatawanmanca', ascending=False).reset_index(drop=True)
df_sorted.index += 1  # Nomor dimulai dari 1
df_sorted['No'] = df_sorted.index

# Menampilkan tabel dengan pewarnaan
fig, ax = plt.subplots(figsize=(12, 7))
ax.axis('tight')
ax.axis('off')

# Buat colormap untuk pewarnaan
cmap = LinearSegmentedColormap.from_list("custom", ["red", "yellow", "green"], N=4)
colors = df_sorted['wisatawanmanca'].map(lambda x: cmap(x / 3))

# Tambahkan data tabel ke matplotlib
table_data = df_sorted[['No', 'Desa/Kelurahan', 'Kecamatan', 'Wisman', 'wisatawanmanca']].values
col_labels = ['No', 'Desa/Kelurahan', 'Kecamatan', 'wisatawanmanca', 'Skala']

# Tabel dengan warna pada kolom Skala
table = plt.table(
    cellText=table_data,
    colLabels=col_labels,
    loc='center',
    cellColours=[
        ['white', 'white', 'white', 'white', color] for color in colors
    ]
)

# Atur ukuran font dan lebar kolom
table.auto_set_font_size(False)
table.set_fontsize(10)
table.auto_set_column_width(col=list(range(len(col_labels))))

plt.title('Tabel Skala Prioritas Akomodasi per Kecamatan', fontsize=14)
plt.show()

"""##Wisnus"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Terapkan klasifikasi
df['wisata_nusantara'] = df['Wisnus'].apply(klasifikasi_wisnus)

# Tambahkan nomor urut
df_sorted = df.sort_values(by='wisata_nusantara', ascending=False).reset_index(drop=True)
df_sorted.index += 1  # Nomor dimulai dari 1
df_sorted['No'] = df_sorted.index

# Menampilkan tabel dengan pewarnaan
fig, ax = plt.subplots(figsize=(12, 7))
ax.axis('tight')
ax.axis('off')

# Buat colormap untuk pewarnaan
cmap = LinearSegmentedColormap.from_list("custom", ["red", "yellow", "green"], N=4)
colors = df_sorted['wisata_nusantara'].map(lambda x: cmap(x / 3))

# Tambahkan data tabel ke matplotlib
table_data = df_sorted[['No', 'Desa/Kelurahan', 'Kecamatan', 'Wisnus', 'wisata_nusantara']].values
col_labels = ['No', 'Desa/Kelurahan', 'Kecamatan', 'wisata_nusantara', 'Skala']

# Tabel dengan warna pada kolom Skala
table = plt.table(
    cellText=table_data,
    colLabels=col_labels,
    loc='center',
    cellColours=[
        ['white', 'white', 'white', 'white', color] for color in colors
    ]
)

# Atur ukuran font dan lebar kolom
table.auto_set_font_size(False)
table.set_fontsize(10)
table.auto_set_column_width(col=list(range(len(col_labels))))

plt.title('Tabel Skala Prioritas Akomodasi per Kecamatan', fontsize=14)
plt.show()

import pandas as pd

# Load dataset yang ditampilkan
df = pd.read_csv('/content/drive/MyDrive/Bismillah Skripsi /Hasil Prepro.csv')

# Load dataset asli
df_asli = pd.read_csv('/content/drive/MyDrive/Bismillah Skripsi /Dataset.csv')  # Pastikan file ini memiliki kolom "No", "Desa/Kelurahan", "Kecamatan"

# Hapus kolom lama
df = df.drop(columns=['Desa/Kelurahan', 'Kecamatan'])

# Gabungkan berdasarkan kolom 'No'
df = pd.merge(df, df_asli[['No', 'Desa/Kelurahan', 'Kecamatan']], on='No', how='left')

# Pindahkan kolom 'Desa/Kelurahan' ke posisi awal (indeks ke-1)
df.insert(1, 'Desa/Kelurahan', df.pop('Desa/Kelurahan'))

# Pindahkan kolom 'Kecamatan' ke posisi awal (indeks ke-2)
df.insert(2, 'Kecamatan', df.pop('Kecamatan'))

# Tambahkan kolom Cluster dari hasil KMeans
# Pastikan kmeans_labels sudah didefinisikan sebelumnya dan memiliki panjang yang sesuai dengan df
df['Cluster'] = kmeans_labels

# Tambahkan kolom keterangan potensi berdasarkan Cluster
df['Potensi'] = df['Cluster'].map({
    0: 'Potensi Kurang',
    1: 'Potensi Sedang',
    2: 'Potensi Tinggi'
})

# Simpan dataset baru
output_path = '/content/drive/MyDrive/Bismillah Skripsi /dataset_terbaru1.csv'
df.to_csv(output_path, index=False)
print(df.head())

# Simpan dataset visualisasi
visualisasi_path = '/content/drive/MyDrive/Bismillah Skripsi /data_visualisasi1.csv'
df.to_csv(visualisasi_path, index=False)
print(f"File berhasil disimpan di {visualisasi_path}")

# Menampilkan hanya kolom 'Desa/Kelurahan' dan 'Potensi' untuk masing-masing kategori
potensi_kurang = df[df['Potensi'] == 'Potensi Kurang'][['Desa/Kelurahan', 'Potensi']]
potensi_sedang = df[df['Potensi'] == 'Potensi Sedang'][['Desa/Kelurahan', 'Potensi']]
potensi_tinggi = df[df['Potensi'] == 'Potensi Tinggi'][['Desa/Kelurahan', 'Potensi']]

# Hitung jumlah data untuk setiap potensi
jumlah_potensi = df['Potensi'].value_counts()

# Menampilkan hasil
print("Potensi Kurang:")
print(potensi_kurang)
print(f"Jumlah Potensi Kurang: {jumlah_potensi.get('Potensi Kurang', 0)}\n")

print("Potensi Sedang:")
print(potensi_sedang)
print(f"Jumlah Potensi Sedang: {jumlah_potensi.get('Potensi Sedang', 0)}\n")

print("Potensi Tinggi:")
print(potensi_tinggi)
print(f"Jumlah Potensi Tinggi: {jumlah_potensi.get('Potensi Tinggi', 0)}\n")

potensi_kurang.to_csv('potensi_kurang.csv', index=False)
potensi_sedang.to_csv('potensi_sedang.csv', index=False)
potensi_tinggi.to_csv('potensi_tinggi.csv', index=False)

print("Data berhasil disimpan ke file CSV:")
print("- potensi_kurang.csv")
print("- potensi_sedang.csv")
print("- potensi_tinggi.csv")

import pandas as pd
import matplotlib.pyplot as plt

# Filter data untuk Potensi Tinggi
potensi_tinggi = df[df['Potensi'] == 'Potensi Tinggi'][['Desa/Kelurahan', 'Potensi']]

# Visualisasi tabel Potensi Tinggi
fig, ax = plt.subplots(figsize=(10, 5))
ax.axis('tight')
ax.axis('off')
ax.table(cellText=potensi_tinggi.values, colLabels=potensi_tinggi.columns, loc='center')
ax.set_title('Potensi Tinggi', fontweight="bold")

plt.show()

# Filter data untuk Potensi Sedang
potensi_sedang = df[df['Potensi'] == 'Potensi Sedang'][['Desa/Kelurahan', 'Potensi']]

# Visualisasi tabel Potensi Sedang
fig, ax = plt.subplots(figsize=(10, 5))
ax.axis('tight')
ax.axis('off')
ax.table(cellText=potensi_sedang.values, colLabels=potensi_sedang.columns, loc='center')
ax.set_title('Potensi Sedang', fontweight="bold")

plt.show()

# Filter data untuk Potensi Kurang
potensi_kurang = df[df['Potensi'] == 'Potensi Kurang'][['Desa/Kelurahan', 'Potensi']]

# Visualisasi tabel Potensi Kurang
fig, ax = plt.subplots(figsize=(10, 5))
ax.axis('tight')
ax.axis('off')
ax.table(cellText=potensi_kurang.values, colLabels=potensi_kurang.columns, loc='center')
ax.set_title('Potensi Kurang', fontweight="bold")

plt.show()